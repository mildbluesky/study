깃 공부
1.시작하기
	1.1. 버전관리란?
		: 데이터 백업을 해, 안정성을 고려한 것
		: 최초 개인개발 시, 하드에 데이터 백업 (로컬버전관리 VCS-Version Control System 도구중 RCS 주로 사용)
		: 그 후 중앙집중식 버전관리(CVCS - Center Version Control System) : 중앙 시스템에 문제 있을 시 타격 - svn
		: 그 후 분산버전관리(DVCS - Dispersion Version Control System) : 중앙 시스템 문제 있을 시 로컬에서 클론이 가능해짐 - git
		
	
	1.2. 짧게 보는 Git의 역사
		: 2002년 이전까지는 리눅스는 patch와 압축파일로 관리 됨
		: 2002년 BitKeeper라는 상용 DVCS가 나왔다.
		: 불만을 느낀 Linux 개발 커뮤니티에서 Git을 개발하기 시작
		: Git 은 빠른속도, 단순한 구조, 비선형적인 개발, 완벽한 분산, 대형프로젝트에서 유용할 것이라는 목표를 지향하는 중.
	
	
	1.3. Git 기초
		: svn 은 시간순으로 변경된 파일을 저장 관리한다. - 델타 기반 -
		: git 은 파일 변경상태 순으로 시점에 상태를 관리한다. - 스냅샷 -
		: 거의 모든 명령이 로컬에서 실행 된다. 오프라인에서 commit도 가능하다.
		: 저장하기전 체크섬(SHA-1 해시 : 24b9da6552252987aa493b52f8696cd6d3b00373) 으로 관리하기떄문에 git없이는 디랙토리 변경, 파일상태, 데이터 손실 시킬 수 없다.
		: *깃이 로컬에서 저장되는 곳 -> .git 폴더
		: *깃이 가지는 세가지 상태 -> commited, modified, staged
		: *commited -> 로컬 데이터베이스에 저장됐다.
		: *modified -> 아직 커밋되지 않은 수정된 파일을 의미한다.
		: *staged -> 곧 커핏할 것이라고 표시한 상태를 의미한다.
		: *working direct -> 작업하는 브랜치
		: *staging area -> 커밋하기전에 정보를 저장한다 (index)
		: *.git directory (Repository) -> 깃저장관련 정보를 저장한다.
		
		
	1.4. CLI
		: git tool
		: 모든 기능 구현 가능하다.
		: GUI도 있지만 모든 기능을 구현하지 못한다.
		
		
	1.5. 시작하기 - Git 설치
		: http://git-scm.com/download/win 에서 설치
		
		
	1.6. 시작하기 - Git 최초 설정
		: 64비트 windows 시스템에서 notepad ++로 config 여는 방법 -> 직접 찾아서 notepad로 열기
		: 설정명령어 -> git config
		: Git/etc/gitconfig 파일 -> 모든사용자와 모든저장소에 적용되는 설정파일 -> git config --system 
		: 해당폴더 /.gitconfig -> 특정사용자(현재사용자)에게의 모든 저장소에 적용되는 설정파일 -> git config --global
		: .git/config -> 특정저장소(혹은 현재 작업 중인 프로젝트) 에만 적용되는 설정파일 -> git config --local
		: 우선순위는 .git/config -> 해당폴더/.gitconfig -> git/etc/gitconfig 순임.
		: 사용자 이름설정 -> git config --global user.name "John Doe"
		: 사용자 이메일 설정 -> git config --global user.email "abs@nave.com"
		: 기본 뷰어 노트패드로 설정하기 -> $ git config --global core.editor "'C:/Program Files/Notepad++/notepad++.exe' -multiInst -nosession"
		
		
	1.7. 도움말 보기
		: -h, --help 옵션 사용
		
		
	1.8.시작하기 - 요약
		: Git이 무엇인지 다른 CVC와 어떻게 다른지 배움.
		: Git설치법과 사용자 정보설정을 배움
		
		
	
*2.Git의 기초
	2.1. Git의 기초 - Git 저장소 만들기
		: 저장소 만드는 방법에는 로컬디렉토리 하나 만들어 선택해서 적용하는 방법과 다른 어딘가에서 Git저장소를 Clone하는 법이 있다.
		: 1번방법은 git init -> git add . -> git commit -m 'test'
		: 2번방법은 해당디랙토리에서 git bach 열고 git clone 주소 
		: 주소는 https, git://, user@server:path/to/repo.git같은 ssh도 가능
		: git-bash.exe파일의 default 위치는 program files\git\git-bash.exe 이다.
		
		
	2.2. Git의 기초 - 수정하고 저장소에 저장하기
		: 상태 이동은 Untracked -> Unmodified -> Modified -> Staged
		: Untracked -> 새로운 파일이 생길 경우 untracked
		: git add 의 경우 바로 stage 상태로 변경
		: .gitigonore로 파일을 무시할 수 있다.
		: .a -> 확장자가 .a 인 파일을 무시
		: !lib.a -> 윗라인에서 확장자가 .a인 파일을 무시하게 했지만 lib.a 를 예외로 둠
		: /TODO -> 현재 디렉토리에 있는 TODO파일은 무시하고 subdir/TODO처럼 하위디렉토리에 있는 파일은 무시하지 않음.
		: build/ -> build/ 디렉토리에 있는 모든 파일은 무시
		: doc/*.txt -> doc/*.txt파일은 무시하고 doc/server/*.txt는 무시지 않음
		: doc/**/*.pdf -> doc 디렉토리 아래의 모든 .pdf 파일을 무시
		: git diff -> staged 상태가 아닌 파일을 비교 해 볼 수 있음.
		
		
	2.3. Git의 기초 - 커밋 히스토리 조회하기
		: git log -p or --patch -> 수정된 사항 자세히 조회하기
		: --graph -> 브랜치와 머지 히스토리 정보까지 아스키 그래프로 보여준다.
		
		
	*2.4. Git의 기초 - 되돌리기
		: commit 상태 되돌리기 -> git commit --amend
		: staged 상태를 unstage상태로 되돌리기 -> git reset fileName
		: modified 파일 되돌리기 -> git checkout -- fileName
		: (추가) commit 시점으로 되돌리기 -> git reset --hard or --soft or --mixed checksum
		: (추가) --hard 기존 커밋을 초기화, --soft 기존 커밋을 유지, --mixed 변경 내용은 남아있지만 staged된 정보는 초기화
<<<<<<< HEAD
		
		
	*2.5. GIt의 기초 - 리모트 저장소
		: 로컬 저장소에는 없지만 git hub 에 있는 것을 가져오려면 -> git fetch origin
=======
		: test edited!
>>>>>>> 486ec5e3b9e8920783a926b06312d3a6d1ac0959
		
		
		
		
		
		
	
		

		
		
		
		
		
		
		

	






================깃 단축키=======================
종료 : q


=================별첨==========================
공부한 url : https://git-scm.com/book/ko/v2/
